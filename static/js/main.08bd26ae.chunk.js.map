{"version":3,"sources":["utils/API.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Main","state","search","employees","sorted","order","onClick","console","log","setState","sort","sorting","reverse","API","then","data","results","catch","err","e","this","target","value","a","b","name","first","filteredEmployees","filter","employee","toLowerCase","indexOf","className","type","placeholder","onChange","handleFilter","bind","scope","map","i","key","alt","src","picture","medium","last","email","cell","dob","age","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uRAIe,aAGP,OAAOA,IAAMC,IAAI,0CCiHVC,E,4MAnHXC,MAAQ,CACJC,OAAO,GACPC,UAAW,GACXC,OAAQ,GACRC,OAAO,G,EA6BXC,QAAU,WACNC,QAAQC,IAAI,aACW,IAApB,EAAKP,MAAMI,MACV,EAAKI,SAAS,CACVL,OAAO,EAAKH,MAAME,UAAUO,KAAK,EAAKC,SACtCN,OAAO,IAIX,EAAKI,SAAS,CACVL,OAAO,EAAKH,MAAME,UAAUS,UAC5BP,OAAO,K,kEApCE,IAAD,OAChBQ,IACKC,MAAK,SAAAC,GAEF,EAAKN,SAAS,CACVN,UAAWY,EAAKA,KAAKC,aAG5BC,OAAM,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,Q,mCAGpBC,GACVC,KAAKX,SAAS,CAACP,OAAQiB,EAAEE,OAAOC,U,8BAG3BC,EAAGC,GACR,OAAKD,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,OACjB,EAELH,EAAEE,KAAKC,MAAOF,EAAEC,KAAKC,MACjB,EAEF,I,+BAqBD,IAAD,OACDC,EAAoBP,KAAKnB,MAAME,UAAUyB,QACzC,SAACC,GAEG,OAAuF,IAAhFA,EAASJ,KAAKC,MAAMI,cAAcC,QAAQ,EAAK9B,MAAMC,OAAO4B,kBAQ3E,OAJAvB,QAAQC,IAAImB,GAKR,oCACI,yBAAKK,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,uBACA,2BAAOC,KAAK,OAAOD,UAAU,cAAcE,YAAY,iBACvDZ,MAAQF,KAAKnB,MAAMC,OAAQiC,SAAWf,KAAKgB,aAAaC,KAAKjB,UAKrE,2BAAOY,UAAU,oBACb,+BACI,4BACI,wBAAIM,MAAM,QACV,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMhC,QAAUc,KAAKd,SAA/B,SACA,wBAAIgC,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,SAGR,+BACMX,EAAkBY,KAAI,SAACV,EAAUW,GAAX,OACpB,wBAAIC,IAAKD,GACL,wBAAIF,MAAM,OAAOE,EAAI,GACrB,4BAAI,yBAAKE,IAAKb,EAASJ,KAAKC,MAAOiB,IAAKd,EAASe,QAAQC,UACzD,4BAAKhB,EAASJ,KAAKC,OACnB,4BAAKG,EAASJ,KAAKqB,MACnB,4BAAKjB,EAASkB,OACd,4BAAKlB,EAASmB,MACd,4BAAKnB,EAASoB,IAAIC,gB,GAlG/BC,IAAMC,WCQVC,MARf,WACE,OAEI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdnD,OAAM,SAAAoD,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.08bd26ae.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\n\r\nexport default {\r\n\r\n    getEmployees(){\r\n        return axios.get(\"https://randomuser.me/api/?results=40\")\r\n    }\r\n}","import React from \"react\";\r\nimport API from \"../utils/API\"\r\n\r\nclass Main extends React.Component {\r\n\r\n    state = {\r\n        search:\"\",\r\n        employees: [],\r\n        sorted: [],\r\n        order: false\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(data => {\r\n                // console.log(data.data.results);\r\n                this.setState({\r\n                    employees: data.data.results\r\n                })\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleFilter (e){\r\n        this.setState({search: e.target.value});\r\n    }\r\n\r\n    sorting( a, b) {\r\n        if ( a.name.first < b.name.first ){\r\n          return -1;\r\n        }\r\n        if ( a.name.first> b.name.first ){\r\n          return 1;\r\n        }\r\n        return 0;\r\n      } \r\n     \r\n    onClick = () =>{\r\n        console.log(\"it works\");\r\n        if(this.state.order=== false){\r\n            this.setState({\r\n                sorted:this.state.employees.sort(this.sorting),\r\n                order: true\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                sorted:this.state.employees.reverse(),\r\n                order: false\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let filteredEmployees = this.state.employees.filter(\r\n            (employee) =>{\r\n                // return employee.indexOf(this.state.search) !== -1;\r\n                return employee.name.first.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;\r\n            }\r\n\r\n        );\r\n        console.log(filteredEmployees);\r\n\r\n       \r\n\r\n        return (\r\n            <>\r\n                <div className=\"jumbotron jumbotron-fluid\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"display-4\">Employee Directory</h1>\r\n                        <p className=\"lead\">Find your Employees</p>\r\n                        <input type=\"text\" className=\"text-center\" placeholder=\"Search by Name\" \r\n                        value= {this.state.search} onChange= {this.handleFilter.bind(this)}/>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\"></th>\r\n                            <th scope=\"col\">Image</th>\r\n                            <th scope=\"col\" onClick= {this.onClick}>First</th>\r\n                            <th scope=\"col\">Last</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Phone Number</th>\r\n                            <th scope=\"col\">Age</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { filteredEmployees.map((employee, i) => (\r\n                            <tr key={i}>\r\n                                <th scope=\"row\">{i + 1}</th>\r\n                                <td><img alt={employee.name.first} src={employee.picture.medium} /></td>\r\n                                <td>{employee.name.first}</td>\r\n                                <td>{employee.name.last}</td>\r\n                                <td>{employee.email}</td>\r\n                                <td>{employee.cell}</td>\r\n                                <td>{employee.dob.age}</td>\r\n                                \r\n                            </tr>\r\n                        ))}\r\n\r\n                    </tbody>\r\n\r\n                </table>\r\n            </>\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nexport default Main;","import React from \"react\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    \n      <Main/>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}